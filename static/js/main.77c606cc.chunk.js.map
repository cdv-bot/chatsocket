{"version":3,"sources":["component/FieldName.js","firebase.js","App.js","component/useChat.js","serviceWorker.js","index.js"],"names":["FieldName","chatName","nameLocal","localStorage","getItem","fullName","useRef","useState","checkName","setCheckName","onSubmit","e","preventDefault","value","current","trim","namePass","md5","setItem","ref","placeholder","style","height","width","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","App","props","socketRef","refMessage","refScroll","valueSet","content","setContent","setChatName","refLoading","setRefLoading","useEffect","io","connect","on","name","message","scrollIntoView","disconnect","valueNames","database","snapshot","full","val","Object","values","includes","onMessageSubmit","emit","onTextChange","set","clearTimeout","setTimeout","useChat","hash","console","log","clear","className","map","index","key","color","class","onChange","autoComplete","icon","faPaperPlane","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.77c606cc.chunk.js","sourcesContent":["import md5 from 'md5';\r\nimport React, { useRef, useState } from 'react';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction FieldName({ chatName }) {\r\n  const nameLocal = localStorage.getItem('name');\r\n  const fullName = useRef();\r\n  const [checkName, setCheckName] = useState(nameLocal ? false : true);\r\n  const handlSubmit = e => {\r\n    e.preventDefault();\r\n    const value = fullName.current.value;\r\n    if (value?.trim()) {\r\n      let namePass = md5(value + 200);\r\n      localStorage.setItem('hashcode', namePass);\r\n      localStorage.setItem('name', value);\r\n      setCheckName(false);\r\n      chatName(value);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {checkName ? (\r\n        <form onSubmit={handlSubmit}>\r\n          <input\r\n            ref={fullName}\r\n            placeholder=\"Nhập tên chat!!!\"\r\n            style={{\r\n              height: '25px',\r\n              width: '300px'\r\n            }}\r\n          />\r\n        </form>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FieldName;\r\n","// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport firebase from 'firebase/app';\r\n\r\nimport 'firebase/analytics';\r\nimport 'firebase/database'\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBLYiIZfmJhkSWIigohyncxLv366h5ybLo\",\r\n  authDomain: \"chatbox-e7b02.firebaseapp.com\",\r\n  projectId: \"chatbox-e7b02\",\r\n  storageBucket: \"chatbox-e7b02.appspot.com\",\r\n  messagingSenderId: \"928490150543\",\r\n  appId: \"1:928490150543:web:c92edca7ae2bff30e52efa\",\r\n  measurementId: \"G-0DWJ3CWVET\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\n\r\nexport default firebase;\r\n\r\n","import { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport md5 from 'md5';\r\nimport React, { useEffect } from 'react';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport './App.css';\r\nimport FieldName from './component/FieldName';\r\nimport useChat from './component/useChat';\r\n\r\nfunction App() {\r\n  const {\r\n    content,\r\n    setChatName,\r\n    onMessageSubmit,\r\n    onTextChange,\r\n    refMessage,\r\n    refLoading,\r\n    refScroll\r\n  } = useChat();\r\n\r\n  useEffect(() => {\r\n    let hash = localStorage.getItem('hashcode');\r\n    let name = localStorage.getItem('name');\r\n    if (hash !== md5(name + 200)) {\r\n      console.log(\"lan\")\r\n      localStorage.clear();\r\n    }\r\n  }, []);\r\n\r\n  const renderChat = () => {\r\n    return content.map(({ name, message }, index) => (\r\n      <div key={index} className=\"item-chat\">\r\n        <p className=\"name\">{name}:</p>\r\n        <p className=\"textchat\">{message}</p>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"render-chat\">\r\n      <div className=\"name-field\">\r\n        <FieldName chatName={setChatName} />\r\n      </div>\r\n      <div className=\"bd_chat\">\r\n        <div className=\"box-chat\">\r\n          {renderChat()}\r\n          <div ref={refScroll} style={{ color: 'white' }}></div>\r\n        \r\n        {refLoading && (\r\n            <>\r\n              <div class=\"chat-bubble\">\r\n                <div class=\"typing\">\r\n                  <div class=\"dot\"></div>\r\n                  <div class=\"dot\"></div>\r\n                  <div class=\"dot\"></div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <form onSubmit={onMessageSubmit} className=\"form_bt\">\r\n          <input\r\n            className=\"input_sent\"\r\n            name=\"message\"\r\n            ref={refMessage}\r\n            onChange={e => onTextChange(e)}\r\n            autoComplete=\"off\"\r\n          />\r\n\r\n          <button className=\"bt\">\r\n            <FontAwesomeIcon icon={faPaperPlane} />\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport firebase from '../firebase';\r\n\r\nexport default function useChat(props) {\r\n  const socketRef = useRef();\r\n  const refMessage = useRef();\r\n  const refScroll = useRef(null);\r\n  const valueSet = useRef();\r\n  const [content, setContent] = useState([]);\r\n  const [chatName, setChatName] = useState();\r\n  const [refLoading, setRefLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io.connect('https://webchatsokket.herokuapp.com');\r\n    socketRef.current.on('message', ({ name, message }) => {\r\n      setContent([...content, { name, message }]);\r\n      refScroll.current.scrollIntoView();\r\n    });\r\n    return () => socketRef.current.disconnect();\r\n  }, [chatName, content]);\r\n\r\n  const onTextChange = e => {\r\n    const valueNames = localStorage.getItem('hashcode');\r\n    firebase.database().ref(`sentloading/${valueNames}`).set(true);\r\n    if (valueSet.current) {\r\n      clearTimeout(valueSet.current);\r\n    }\r\n    valueSet.current = setTimeout(() => {\r\n      firebase.database().ref(`sentloading/${valueNames}`).set(false);\r\n    }, 500);\r\n    //   setValueMessage(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const valueNames = localStorage.getItem('hashcode');\r\n    var starCountRef = firebase.database().ref('sentloading');\r\n    starCountRef.on('value', function (snapshot) {\r\n      const full = { ...snapshot.val() };\r\n      delete full[valueNames];\r\n      let arr = Object.values(full);\r\n  \r\n      if (arr.includes(true)) {\r\n        setRefLoading(true);\r\n      } else {\r\n        setRefLoading(false);\r\n      }\r\n    });\r\n  });\r\n\r\n  const onMessageSubmit = e => {\r\n    e.preventDefault();\r\n    const name = localStorage.getItem('name');\r\n    const value = refMessage.current.value;\r\n    socketRef.current.emit('message', { name: name, message: value });\r\n    refMessage.current.value = '';\r\n  };\r\n\r\n  return {\r\n    content,\r\n    onMessageSubmit,\r\n    setChatName,\r\n    onTextChange,\r\n    refMessage,\r\n    refLoading,\r\n    setRefLoading,\r\n    refScroll\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}